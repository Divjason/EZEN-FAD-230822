1.useState : 리액트 프로젝트에서 어떠한 값의 변화를 감지하고, 변경된 값을 찾아오고 싶을 때 사용하는 리액트 훅

*리액트 가상돔 형식을 사용한다!!
**실제 JS DOM => 쿼리셀렉터 등 기존에 JS에서 html문서객체를 다루기 위해서 사용했던 속성 및 메서드는 일체 사용불가!!!

2.useRef : 가상돔안에 있는 문서객체들을 관리.조작하고자 할 때

*현재 구현해야하는 기능!!!
1.하단에 버튼을 클릭하면,
카운트에 존재하는 숫자가 변경!!!

*App / Viewer / Controll
=> 카운트에 저장되는 변수값을 어디다가 저장해놔야 할까?
=> 부모 => 자녀 / 자녀 => 부모

3.useEffect :
- 리액트 => 앱 (*여러개의 다양한 컴포넌트로 구성!!)
- 컴포넌트들이 웹 브라우저!!! / 처음부터 끝까지 작동하는 것은 아니다!!!
- 굳이 지금 당장 사용되지 않을 컴포넌트까지 웹 브라우저가 가져와서 사용시킬 필요가 없음!!!
- 컴포넌트들 중에서 사용될 때에만 가져와서 쓸 수 있도록 조치가 필요!!!!
- 컴포넌트의 생애주기!! (*Life Cycle)
- Mount(*탄생) / Update(*업데이트) / Unmount(*죽음)
- Mount(*탄생) : 어떠한 컴포넌트의 페이지가 최초로 랜더링이 될 때 (*랜더링 => 컴포넌트를 처음 막 불러올 때)
- Update(*업데이트) : useState를 통해서 상태변화값이 입력되었을 때
- Unmount(*죽음) : 특정 컴포넌트가 자신의 역할을 다 수행하고 최종적으로 종료가 되어진 그 시점

*useEffect(콜백함수, [데이터] => 의존성배열 ) => 컴포넌트의 생애주기를 컨트롤!!!
1) 웹 브라우저 페이지를 새로고침 할 때마다 무엇인가를 실행시키고 싶다!!! (*웹 페이지가 랜더링)
- useEffect( )안에 인자값으로 관리하고자 하는 데이터값을 별도로 지정하지 않은 경우에는 무조건, 컴포넌트가 랜더링 될 때마다 실행합니다!!!!

2) 컴포넌트가 랜더링될 때에는 콜백함수를 실행시키지 않고, 업데이트 시점에만 콜백함수를 실행시키고자 할 때!!!!
- 조건값을 부여해서 

3) 컴포넌트가 탄생이 되는 그 시점에만 실행하고자 할 때!!!
- useEffect(콜백함수, [ ] )안에 빈배열을 인자값으로 적용!!

4) 컴포넌트의 죽음의 시점을 제어하고자 할 때!!!
- setInterval & clearInterval 활용해서 컴포넌트의 죽음을 강제 (*컨트롤했음)

