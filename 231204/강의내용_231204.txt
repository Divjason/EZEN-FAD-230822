*호스팅 방법 추가!!!
1) firebase
2) netlify
3) github

> 그 어떤 서버를 활용해서 호스팅
> node_modules 호스팅 불가!!!
(*400메가)
> npm i

C / R / U / D

Props Driling
- useContext : 리액트 훅
- redux : 컴포넌트간 비효율적인 데이터 전달 관리를 해결하기위한 해결사!!!
- middleware : Hard / Soft
- App.js / redux (*데이터) / Item / List / Editor / App
- redux saga : 리액트의 모든 데이터 관리를 다 처리할 수 있는 기능을 총집합해서 넣어놓음!!! (*난이도 꽤 높음)
- redux thunk : 소규모의 리액트 프로젝트를 진행할 때 무난하게 사용할 수 있도록 만든 중간 미들웨어

- FE 채용 react / 우대조건 redux >  saga

- IT 분야 문화!!!
- 어떤 개발자가 특정 무한슬라이드 작동 코드!!!
- 독점X (*매우 싫어하는문화)
- 특정한 요소 및 영역에 트래픽 집중 혐오!!!

*React 훅
- useState( )
- usrRef( )
- useEffect( )
- useReducer( ) : useState( )훅과 더불어서 state 변수값의 변화를 감지하고, 관리해주는 역할 훅!!!
(*useState( )의 업데이트 상위버전)
useState( ) 해당 훅을 사용하지 않은 상태에서 상태관리를 해보자!!
1) useState( ) 집중되고 있는 상태관리를 외부 reducer 함수로 컴포넌트 밖으로 빼낼 수 있다
2) 현재 작업중인 리액트 프로젝트의 컴포넌트 상태를 모두 특정한 타입으로 정의해서 관리할 수 있다 (*언제라도 새로운 타입을 생성해서 적용하는게 큰 어려움이 없다)

*현업 실무에서는 useState / useReducer
=> 둘 다 많이 사용함!!!
=> 프로젝트의 규모가 작을 수록 useState( )
=> 프로젝트의 규모가 살짝 중간이다 useReducer( )
=> 프로젝트의 규모가 대급이다 redux( )
(*나는...)

*최적화!!!!
- react앱 제작하는 프로젝트의 파이널 단계!!!
- 앱에서 반복적으로 사용되는 코드가 존재하거나 혹은 A기능을 구현하는데, 굳이 B, C기능이 재반복되어서 랜더링하는 이러한 경우를 최소화하기 위한
- 메모이제이션!!! => Memoization 기법
- 동건 노브랜버거 점심!!!
- 5명 => 햄버거 / 노브랜드버거 신제품 / 찬영 / 유나 / 물어보지 말고, 이 메뉴는 노브랜드버거 신제품임!!!! 

리액트 훅천국

useMemo( )

*html / css / scss / js / ts / react (*styled Component)
css & scss & tailwind
=> css : mdn => 구원!!!!!
=> 3개월 (*내용 정수)
=> 위에 있는 언어를 곱씹어가면서 1달씩


const value = useMemo(callback, deps)

*리액트 앱의 최적화 방법이 과연 useMemo( )?
- React.memo => 최적화를 시켜주는 또 하나의 방법!!!
- TS : 고차함수 (*함수안에 또다른 함수를 매개변수 혹은 반환값으로 사용할 수 있다는 것을 이야기 => JS 함수 1급함수 => add(1)(2)(3)
=> 클로저
- 고차컴포넌트
const EnhancedComp = withFunc(Comp)- 
- A선수 / B선수 => C선수
- 횡단 관심사 (*크로스 커팅 컨선)
- 리액트 앱을 기획.개발 => 모든 공통적인 페이지에 사용되는 컴포넌트 (*Header => props)
- 아이템 에디터, 아이템 리스트 상태변화!!!

React.memo(Header)

*useCallback( ) : 의존하는 배열값이 변경될 때에만, 콜백함수를 실행시키게 하는 리액트 훅 함수!!!

*useEffect( ) : 컴포넌트가 새롭게 탄생할 때에만 생애주기를 컨트롤 하고자 할 때, 의존성배열 [ ]

*리액트를 활용한 최적화는 유의사항!!!
1) 최적화는 항상 마지막 파이널 단계에서만 한다!!!
(*1/4 : 최적화 / React.memo)
*2/4 : 최적화 => 앱이 구현하고자하는 최종 결과값이 도출되 않은상태에서 최적화!!! 앱 실행부가 망가지거나 구현되지 않아서 현재 내가 작성하는 코드 정확하게 짜여졌는지 알 수 없는 상황!!)

2) 최초 개인포폴 : width : 너비
(*모든 페이지를 최적화 : 가급적 할 수 있는 만큼 / 프로젝트 구현에 판단에 있어서 효율적인 부분이 무엇인가를 정의할 수 있는 정도까지만)

useContext => Props Drilling 비효율성

*프로젝트 마지막 리액트 훅!!= > 새로운 프로젝트
- 컴포넌트간 데이터 이동 비효율성
- context => 책 : 저자서평 / context : 목차 = 맥락

*useState
*useRef
*useEffect
*useReducer
*useMemo
*useCallback
*useContext
=> Context React의 내장 API 를 가져다가 사용한다!!!
=> Web API  Canvas / Geolocation(*위치기반 서비스) / localStorage(*로컬 컴퓨터 공간확보)

*리팩토링!!!!
=> 앞에서 메모이제이션 & react.Memo => 최적화!!!!
=> 데이터 관리를 분산시킴으로 인해서 혹시라도 최적화가 풀리지 않았을까? 혹은 다시 최적화를 해야할 필요는 없을까? 

*useContext를 활용해서 데이터 관리를 적용했을 뿐인데, 왜 최적화가 해제가 되었을까? 결국 데이터를 전달하는 App 컴포넌트가 업데이트가 되는 순간, 업데이트가 된 데이터를 받아오는 useContext도 같이 업데이트가 되기 때문에 결국 ItemList의 최적화가 해제되어버림!!!

**useContext를 2개 만들어서 데이터관리를 2가지 노선으로 가자!!!!
- 함수데이터 관리 / 순수하게 사용자가 입력한 데이터 관리

**문제점!!!
1) todo를 useContext로 데이터를 전달하고 받아올 때, 구조분해할당이 아닌 변수안에 값을 담아서 가져와야 실제 출력이 될 수 있다!!!

2) useContext를 사용해서 데이터를 전달할 때, 전달하는 곳에서 export를 먼저 한 이후에 전달받는 곳에서 import를 해서 받아와야 문제가 발생하지 않는다

3) useMemo를 활용한 메모이제이션을 할 때, 빈배열로 컴포넌트 생애주기를 관리하는 경우, 가끔 나오는 에러메세지는 
// eslint-disable-next-line react-hooks/exhaustive-deps
상기 문구를 입력해서 넘어갈 수 있다!!!

<React를 학습하는데 있어서 필수 Hooks>
useState( ) : 리액트 앱의 상태변화 관리 훅
useRef( ) : 리액트 앱 내부에 특정 요소(*노드)를 컨트롤할 수 있게 해주는 훅
useEffect( ) : 리액트 앱 내부 컴포넌트들의 생애주기를 관리하게 해주는 훅
useReducer( ) : useState( ) 훅의 상위 업그레이드 버전, 상태변화 관리 훅
useMemo( ) : 리액트 앱의 최적화를 하기 위한 훅
React.Memo( ) : 리액트 모듈에 내장되어있는 컴포넌트 함수
useCallback( ) : 의존성 배열의 변화에 의한 콜백함수를 실행하고 싶을 때 사용하는 훅
React.createContext( ) : useContext( )를 사용하기 위해서 리액트 모듈에서 가져올 수 있는 함수 / 해당 함수를 통해 값을 전달받은 컴포넌트는 provider라는 키를 사용할 수 있음
useContext( ) : createContext( )라는 함수를 통해 값을 전달받은 컴포넌트를 인자값을 받아서 해당 값을 사용할 수 있도록 해주는 훅

개발자들이 모든 문법 및 기능을 다 외워서 사용하는 것이 아니다!!!
내가 현재 마주한 문제를 해결하기 위해서 어떤 훅을 사용해야하는가를 알고 있으면 됨!!!













