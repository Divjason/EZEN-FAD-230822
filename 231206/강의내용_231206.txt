1.html, css, js를 사용해서 프로젝트를 진행했던 순서, 과정 동일!!!
(*react => jsx 문법)

2.작업하고자하는 프로젝트 전체 폰트 설정!!! => 스타일을 적용!!!
- index.js > app.js > home, diary, edit 등등

3.리액트 앱 > 컨텐츠가 생성.삭제.편집 > 
- useState( ) : 상태관리 훅
- useReducer( ) : 상위버전 상태관리 훅

*일기를 작성하게된다면!!!
1) 작성한날짜, 내가 작성한 일기내용, 감정, 해당 일기만의 고유 아이디
2) 위 정보를 어떻게 관리?
- JS : 데이터를 관리하는 도구!!!
- 변수 / 객체 / 배열
- 일기작성 = [{날짜, 내용, 감정, 아이디}, {날짜, 내용, 감정, 아이디}, {날짜, 내용, 감정, 아이디}, {날짜, 내용, 감정, 아이디}, {날짜, 내용, 감정, 아이디}, {날짜, 내용, 감정, 아이디}]
- DOM => 일기를 작성할 때마다 변경되어야하는 요소를 문서객체모델에서 쿼리셀렉터로 잡아와서 증감연산자를 부여하는 이벤트를 적용!!!
- 리액트 SSR / CSR / 가상돔 / DOM(x) / 쿼리셀럭터(x)
- useRef( ) : 컨트롤을 하고자 하는 요소에게 영향을 미치게하고 싶을 때!!

*사용자의 입장에서 
C
1) 일기작성을 위해서 본문을 입력
2) 작성완료!!! 버튼

R
3) 입력한 일기가 화면에 출력

U
4) 일기 수정버튼

D
5) 일기 삭제버튼

C / R / U / D 프로세스 과정

<컴포넌트의 생애주기>
*컴포넌트가 새롭게 태어날 때 (= 마운트 / mount) 딱 한 번 실행!!!!
- useEffect(cb, [ ]) : 의존성배열이 변경되면, cb를 실행하는 리액트 훅

*지금까지, 수강생분들의 리액트 개인 프로젝트 진행 시, 가장 많은 질문을 받았던 요소!!! => 훅 / 문법으로는 문제가 없다!!! / 안된다!!!!
- 에러메세지가 안뜸 / 화면상에 출력x
- 위젯 스피너!!! 
- 리액트 / CSR / 서버는 딱 한 번만 클라이언트한테 데이터를 던져주고, 그 이후에는 클라이언트 측에서 알아서 필요한 데이터를 취합해서 사용자한테 보여주는 방식!!!
- 비동기 방식으로 움직 (*외부에서 받아오는 데이터를 무조건적으로 비동기처리를 한다는것이 아니라, 서버한테 최초에 받아온 데이터는 웹브라우저 안에 다 있기 때문에)
A와 B를 실행시켜라 => A, B

사용자가 B를 실행 (*A라는 데이터가 준비가 되어있어야지만 B가 정상적으로) 
이러한 데이터 로딩 및 처리 순서상의 문제가 초보자들한테 굉장히 많이 발생

App => DataContext => Home / Diary / New / Edit
2개를 만들어서 데이터가 전달되는 루트를 2트랙으로 전달되도록!!!
일기데이터 / 저장하기 & 수정하기 & 삭제하기 함수기능!!!
최적화가 풀려지는 불상사!!!

일기를 10개 작성!!!
[
 {1번일기, 2023-01-06},{2번일기, 2023-05-12},{3번일기, 2023-08-02},.....
]

*일기를 작성하였다 => 최신순 정렬 / 오랜된순 정렬
JS / sort(a, b) => a - b (*오름차순)  / sort(b, a) => b - a (*내림차순)

sort함수는 특징 : 오름차순 혹은 내림차순 정렬가능!!!!
- 원본데이터를 변경시키는 특징!!!
- 일기를 작성 원본 순서는 바꾸고 싶지 않은 상태
- 정렬기능이 부여될 때에만 바꾸고 싶다



